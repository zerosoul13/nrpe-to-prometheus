version: 2
jobs:
 build:
   docker:
     - image: circleci/golang:1.9
   working_directory: /go/src/github.com/robustperception/nrpe_exporter
   steps:
       - checkout
       - run:
           name: Install and run Nagios NRPE server
           command: |
               sudo apt-get update 
               sudo apt-get install nagios-nrpe-server
               cd /etc/nagios
               sudo bash -c 'echo "allowed_hosts=127.0.0.1" >> nrpe_local.cfg'
               cd /etc/default
               sudo bash -c 'cat << EOF > nagios-nrpe-server
               DAEMON_OPTS="--no-ssl"
               EOF'
               service nagios-nrpe-server start
       - run:
           name: Build and run nrpe_exporter with Prometheus
           command: |
               go get 
               go build
               ./nrpe_exporter &
               wget https://github.com/prometheus/prometheus/releases/download/v2.0.0/prometheus-2.0.0.linux-amd64.tar.gz
               tar xzf prometheus-2.0.0.linux-amd64.tar.gz
               cd prometheus-2.0.0.linux-amd64
               cat << EOF > prometheus.yml
               global:
                 scrape_interval: 1s
               scrape_configs:
                 - job_name: nrpe
                   metrics_path: /export
                   params:
                     command: [check_load]
                   static_configs:
                     - targets: 
                       - '127.0.0.1:5666'
                   relabel_configs:
                     - source_labels: [__address__]
                       target_label: __param_target
                     - source_labels: [__param_target]
                       target_label: instance
                     - target_label: __address__
                       replacement: 127.0.0.1:9275 
               EOF
               ./prometheus &
               sleep 5
               res=`curl -g http://localhost:9090/api/v1/query?query=command_status | jq '.data.result | length'`
               if [ $res == 0 ]; then
                   exit 1
               fi
